
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                            <meta charset="UTF-8">
                            <meta name="viewport" content="width=device-width, initial-scale=1.0">
							<style>
								body {
									background-color: white; /* Ensure the iframe has a white background */
								}

								
							</style>
                        </head>
                        <body>
                            <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vegeta's Training</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #121212;
      color: #e0e0e0;
      margin: 0;
      padding: 20px;
    }
    h1 {
      text-align: center;
      color: #03a9f4; /* Sky blue color */
    }
    .container {
      max-width: 600px;
      margin: auto;
      background: #1e1e1e;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }
    input[type="text"], input[type="time"], input[type="number"] {
      width: calc(32% - 10px);
      padding: 10px;
      margin-bottom: 10px;
      border: 1px solid #333;
      border-radius: 4px;
      background-color: #2c2c2c;
      color: #e0e0e0;
    }
    button {
      padding: 10px 15px;
      background-color: #03a9f4; /* Sky blue color */
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      margin-right: 5px;
    }
    button:hover {
      background-color: #0288d1; /* Darker sky blue on hover */
    }
    ul {
      list-style-type: none;
      padding: 0;
    }
    li {
      background: #2c2c2c;
      margin-bottom: 5px;
      padding: 10px;
      border-radius: 4px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;
    }
    li.completed {
      text-decoration: line-through;
      color: #888;
    }
    .task-info {
      display: flex;
      flex-direction: column;
    }
    .task-info span {
      margin-bottom: 5px;
    }
    .task-timer {
      font-size: 18px;
      color: #ffeb3b;
      font-weight: bold;
    }
    .streak {
      margin-top: 20px;
      text-align: center;
      font-size: 18px;
      color: #03dac6;
    }
    .alarm {
      color: #ffeb3b;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <h1>Vegeta's Training</h1>
  <div class="container">
    <input type="text" id="taskInput" placeholder="Add a new task...">
    <input type="time" id="taskTime" placeholder="Start Time">
    <input type="number" id="taskDuration" placeholder="Duration (mins)">
    <button onclick="addTask()">Add Task</button>
    <ul id="taskList"></ul>
    <div class="streak" id="streak">Streak: 0 days</div>
  </div>

  <script>
    let tasks = [];
    let streak = 0;
    let lastCompletedDate = null;

    function addTask() {
      const taskInput = document.getElementById('taskInput');
      const taskTimeInput = document.getElementById('taskTime');
      const taskDurationInput = document.getElementById('taskDuration');
      const taskText = taskInput.value.trim();
      const taskTime = taskTimeInput.value;
      const taskDuration = parseInt(taskDurationInput.value);

      if (taskText === '' || taskTime === '' || isNaN(taskDuration) || taskDuration <= 0) return;

      const task = { 
        text: taskText, 
        time: taskTime, 
        duration: taskDuration * 60, // Convert to seconds
        completed: false,
        timerActive: false,
        intervalId: null
      };
      tasks.push(task);
      renderTasks();
      scheduleTask(task);
      taskInput.value = '';
      taskTimeInput.value = '';
      taskDurationInput.value = '';
    }

    function renderTasks() {
      const taskList = document.getElementById('taskList');
      taskList.innerHTML = '';
      tasks.forEach((task, index) => {
        const li = document.createElement('li');
        li.className = task.completed ? 'completed' : '';
        li.onclick = () => toggleTaskCompletion(index);

        const taskInfo = document.createElement('div');
        taskInfo.className = 'task-info';
        taskInfo.innerHTML = `
          <span>${task.text}</span>
          <span>Starts at ${task.time}, Duration: ${Math.floor(task.duration / 60)} minutes</span>
        `;

        if (task.timerActive) {
          const minutes = Math.floor(task.remainingTime / 60).toString().padStart(2, '0');
          const secs = (task.remainingTime % 60).toString().padStart(2, '0');
          taskInfo.innerHTML += `<span class="task-timer">${minutes}:${secs}</span>`;
        }

        const startButton = document.createElement('button');
        startButton.textContent = task.timerActive ? 'Running...' : 'Start';
        startButton.disabled = task.timerActive || task.completed;
        startButton.onclick = (e) => {
          e.stopPropagation(); // Prevent the click from triggering the task completion
          startTaskTimer(index);
        };

        li.appendChild(taskInfo);
        li.appendChild(startButton);
        taskList.appendChild(li);
      });
    }

    function toggleTaskCompletion(index) {
      tasks[index].completed = !tasks[index].completed;
      renderTasks();
      updateStreak();
    }

    function updateStreak() {
      const allCompleted = tasks.every(task => task.completed);
      const today = new Date().toDateString();

      if (allCompleted && tasks.length > 0) {
        if (lastCompletedDate !== today) {
          streak++;
          lastCompletedDate = today;
        }
      } else {
        streak = 0;
        lastCompletedDate = null;
      }
      document.getElementById('streak').textContent = `Streak: ${streak} day${streak !== 1 ? 's' : ''}`;
    }

    function scheduleTask(task) {
      const now = new Date();
      const [hours, minutes] = task.time.split(':');
      const scheduledTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), hours, minutes);

      if (scheduledTime < now) {
        scheduledTime.setDate(scheduledTime.getDate() + 1); // Schedule for next day if time has passed
      }

      const timeUntilTask = scheduledTime - now;
      setTimeout(() => {
        alert(`ALARM: Time to start "${task.text}"!`);
        showNotification(`Task Alert: "${task.text}" is starting now!`);
        startTaskTimer(tasks.indexOf(task));
      }, timeUntilTask);
    }

    function startTaskTimer(index) {
      const task = tasks[index];
      task.timerActive = true;
      task.remainingTime = task.duration;

      task.intervalId = setInterval(() => {
        task.remainingTime--;
        const minutes = Math.floor(task.remainingTime / 60).toString().padStart(2, '0');
        const secs = (task.remainingTime % 60).toString().padStart(2, '0');

        renderTasks();

        if (task.remainingTime <= 0) {
          clearInterval(task.intervalId);
          task.completed = true;
          task.timerActive = false;
          renderTasks();
          alert(`Task "${task.text}" completed!`);
          updateStreak();
        }
      }, 1000);
    }

    function showNotification(message) {
      if (!("Notification" in window)) {
        alert("This browser does not support desktop notifications");
        return;
      }

      if (Notification.permission === "granted") {
        new Notification(message);
      } else if (Notification.permission !== "denied") {
        Notification.requestPermission().then(permission => {
          if (permission === "granted") {
            new Notification(message);
          }
        });
      }
    }
  </script>
</body>
</html>



							<script>
                            	
							</script>
                        </body>
                        </html>
                    